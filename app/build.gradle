/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // // Use TestNG framework, also requires calling test.useTestNG() below
    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.8.0'

    // testImplementation libs.testng
// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.21.0'
// https://mvnrepository.com/artifact/org.json/json
testImplementation group: 'org.json', name: 'json', version: '20240303'


// https://mvnrepository.com/artifact/io.rest-assured/json-schema-validator
implementation group: 'io.rest-assured', name: 'json-schema-validator', version: '5.4.0'

    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.4.0'
// https://mvnrepository.com/artifact/org.testng/testng
testImplementation group: 'org.testng', name: 'testng', version: '7.10.0'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG(){
        suites 'src/test/resources/testng.xml'
        useDefaultListeners = true // generates the test report
    }
    afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }

    testLogging {
		events "STANDARD_OUT"
        exceptionFormat = 'short'
	}

    testLogging.showStandardStreams = true
    test.outputs.upToDateWhen {false}

}

